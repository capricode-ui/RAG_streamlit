# -*- coding: utf-8 -*-
"""Freezed code of Final PineconeQdrantFAISSandChroma.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N0xv2v3tc6MFMlQ2sxv1cZkGpI3gxEJ2

### Install dependencies
"""


# Call the function


#!pip install "pinecone[grpc]"

from preprocess import *
from inference import *
#!pip install langchain-weaviate
import streamlit as st

# Main Streamlit App
st.title("Vector Database and Chat Model Inference")

# Use session state to manage the `preprocessing_done` flag and `retriever`
if "preprocessing_done" not in st.session_state:
    st.session_state.preprocessing_done = False
if "retriever" not in st.session_state:
    st.session_state.retriever = None

if not st.session_state.preprocessing_done:
    st.header("Preprocessing")

    # User inputs for preprocessing
    doc_path = st.text_input("Enter the path to the document:")
    embedding_model = st.selectbox(
        "Choose an embedding model:",
        [
            "all-MiniLM-L6-v2",
            "paraphrase-MiniLM-L6-v2",
            "distilbert-base-nli-stsb-mean-tokens",
            "all-distilroberta-v1",
            "paraphrase-distilroberta-base-v1",
            "stsb-roberta-base",
            "msmarco-distilbert-base-tas-b",
        ]
    )
    chunk_size = st.number_input("Enter chunk size:", min_value=1, value=2000, step=1)
    chunk_overlap = st.number_input("Enter chunk overlap:", min_value=1, value=500, step=1)

    if st.button("Next"):
        if doc_path:
            with st.spinner("Processing... This may take a while."):
                try:
                    # Call the preprocess_vectordbs function directly
                    index, docstore, index_to_docstore_id, vector_store, retriever, client, pinecone_index,embedding_model_global ,vs= preprocess_vectordbs(
                        doc_path, embedding_model, chunk_size, chunk_overlap
                    )
                    st.session_state.preprocessing_done = True  # Persist the flag
                    st.session_state.retriever = retriever
                    st.session_state.index = index
                    st.session_state.docstore = docstore
                    st.session_state.embedding_model_global=embedding_model_global
                    st.session_state.client=client
                    st.session_state.pinecone_index=pinecone_index
                    st.session_state.vs=vs
                    # Store retriever
                    st.success("Preprocessing Vector DBs Complete! Press Next to Proceed.")
                except Exception as e:
                    st.error(f"An error occurred: {e}")
        else:
            st.warning("Please provide all inputs before running preprocessing.")
else:
    st.header("Inference")

    # User inputs for inference
    vectordb_name = st.selectbox(
        "Choose a vector database:",
        ["Pinecone", "Chroma", "FAISS", "Qdrant", "Weaviate"]
    )
    chat_model = st.selectbox(
        "Choose a chat model:",
        [
            "Qwen/QwQ-32B-Preview",
            "meta-llama/Llama-3.3-70B-Instruct-Turbo",
            "meta-llama/Meta-Llama-3.1-405B-Instruct-Turbo",
            "scb10x/scb10x-llama3-typhoon-v1-5-8b-instruct",
            "meta-llama/Meta-Llama-3.1-8B-Instruct-Turbo",
        ]
    )
    question = st.text_input("Enter your question:")

    if st.button("Run Inference"):
        if question:
            with st.spinner("Running inference..."):
                try:
                    # Call the inference function directly
                   inference(vectordb_name, chat_model, question, st.session_state.retriever,st.session_state.embedding_model_global,st.session_state.index,st.session_state.docstore,st.session_state.client,st.session_state.pinecone_index,st.session_state.vs)
                    #st.write("Answer:", answer)
                except Exception as e:
                    st.error(f"An error occurred: {e}")
        else:
            st.warning("Please enter a question to run inference.")




